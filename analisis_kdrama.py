# -*- coding: utf-8 -*-
"""analisis kdrama.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TedtAQiDm7mGNeeOsV7dy4bUrM7cNCql
"""

import pandas as pd
import numpy as np

import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('top100_kdrama.csv')
df.head()

df.shape

df.info()

df.isnull().sum()

"""## **DATA VISUALIZATION**"""

# Mengurutkan berdasarkan rating dan mengambil top 10
top_10_data = df.sort_values('Rating', ascending=False).head(10)

# Membuat barplot untuk Top 10 drama
plt.figure(figsize=(10, 6))
barplot = sns.barplot(data=top_10_data, x='Rating', y='Name', palette='magma')

# Menambahkan label pada setiap bar
for bar in barplot.patches:
    bar_width = bar.get_width()  # Mendapatkan panjang bar
    bar_x = bar_width + 0.1  # Menentukan posisi x untuk teks
    bar_y = bar.get_y() + bar.get_height() / 2  # Menentukan posisi y untuk teks
    plt.text(bar_x, bar_y, f'{bar_width:.2f}', ha='left', va='center', fontsize=10)

# Menambahkan label dan judul
plt.xlabel('Rating')
plt.ylabel('Drama Title')
plt.title('Top 10 Drama Based on Rating', fontsize=16)
plt.tight_layout()
plt.show()

# Mengurutkan berdasarkan rating dan mengambil bottom 20
top_20_data = df.sort_values('Rating', ascending=True).head(20)

# Membuat barplot untuk bottom 20 drama
plt.figure(figsize=(10, 6))
barplot = sns.barplot(data=top_20_data, x='Rating', y='Name', palette='magma')

# Menambahkan label pada setiap bar
for bar in barplot.patches:
    bar_width = bar.get_width()  # Mendapatkan panjang bar
    bar_x = bar_width + 0.1  # Menentukan posisi x untuk teks
    bar_y = bar.get_y() + bar.get_height() / 2  # Menentukan posisi y untuk teks
    plt.text(bar_x, bar_y, f'{bar_width:.2f}', ha='left', va='center', fontsize=10)

# Menambahkan label dan judul
plt.xlabel('Rating')
plt.ylabel('Drama Title')
plt.title('Bottom 20 Drama Based on Rating', fontsize=16)
plt.tight_layout()
plt.show()

df[df['Name'] == 'Move to Heaven']

# Memisahkan genre (sesuaikan dengan nama kolom genre di dataset)
# Jika genre dipisahkan dengan koma
df['Genre'] = df['Genre'].str.split(', ')

# Mengubah data menjadi satu genre per baris
genre_data = df.explode('Genre')

# Menghitung jumlah drama berdasarkan genre
genre_count = genre_data['Genre'].value_counts().reset_index()
genre_count.columns = ['Genre', 'Count']

# Mengambil Top 10 genre
top_10_genre = genre_count.head(10)

# Membuat barplot untuk Top 10 genre
plt.figure(figsize=(10, 6))
barplot = sns.barplot(data=top_10_genre, x='Count', y='Genre', palette='viridis')

# Menambahkan label pada setiap bar
for bar in barplot.patches:
    bar_width = bar.get_width()  # Mendapatkan panjang bar
    bar_x = bar_width + 0.8  # Menentukan posisi x untuk teks (berikan sedikit jarak)
    bar_y = bar.get_y() + bar.get_height() / 2  # Posisi y di tengah bar
    plt.text(bar_x, bar_y, f'{bar_width:.0f}', ha='left', va='center', fontsize=10)

# Menambahkan label dan judul
plt.xlabel('Count')
plt.ylabel('Genre')
plt.title('Top 10 Genres by Number of Dramas', fontsize=16)
plt.tight_layout()
plt.show()

# Menghitung jumlah drama berdasarkan tahun rilis
year_count = df['Year of release'].value_counts().reset_index()
year_count.columns = ['Year', 'Count']

# Mengurutkan tahun berdasarkan urutan waktu
year_count = year_count.sort_values(by='Year')

# Membuat grafik garis
plt.figure(figsize=(10, 6))
plt.plot(year_count['Year'], year_count['Count'], marker='o', linestyle='-', color='g')

# Menambahkan label pada setiap titik
for x, y in zip(year_count['Year'], year_count['Count']):
    label_x = x  # Posisi x sesuai titik
    label_y = y + 0.5  # Posisi y sedikit di atas titik
    plt.text(label_x, label_y, f'{y}', ha='center', va='bottom', fontsize=10)

# Menambahkan label dan judul
plt.xlabel('Year of Release')
plt.ylabel('Count')
plt.title('Number of Dramas by Year of Release', fontsize=16)
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Mengatur format tahun tanpa koma
plt.xticks(year_count['Year'], rotation=45)

plt.tight_layout()
plt.show()

# Memfilter data untuk tahun 2021
data_2021 = df[df['Year of release'] == 2021]

# Memisahkan genre (asumsi genre dipisahkan oleh koma)
data_2021['Genre'] = data_2021['Genre'].str.split(', ')

# Mengubah data menjadi satu genre per baris
genre_2021 = data_2021.explode('Genre')

# Menghitung jumlah genre pada tahun 2021
genre_count_2021 = genre_2021['Genre'].value_counts().reset_index()
genre_count_2021.columns = ['Genre', 'Count']

# Membuat barplot untuk genre pada tahun 2021
plt.figure(figsize=(10, 6))
sns.barplot(data=genre_count_2021, x='Count', y='Genre', palette='viridis')

# Menambahkan label pada setiap bar
for bar in plt.gca().patches:
    bar_width = bar.get_width()
    bar_x = bar_width + 0.2
    bar_y = bar.get_y() + bar.get_height() / 2
    plt.text(bar_x, bar_y, f'{bar_width:.0f}', ha='left', va='center', fontsize=10)

# Menambahkan label dan judul
plt.xlabel('Count')
plt.ylabel('Genre')
plt.title('Genres in 2021', fontsize=16)
plt.tight_layout()
plt.show()

# Menghitung jumlah drama berdasarkan episode
episode_count = df['Number of Episode'].value_counts().reset_index()
episode_count.columns = ['Number of Episode', 'Count']

# Membuat barplot untuk Top 10 episode
plt.figure(figsize=(10, 6))
barplot = sns.barplot(data=episode_count, x='Number of Episode', y='Count', palette='viridis')

# Menambahkan label pada setiap bar
for bar in barplot.patches:
    bar_height = bar.get_height()  # Mendapatkan tinggi bar
    bar_x = bar.get_x() + bar.get_width() / 2  # Posisi x di tengah bar
    bar_y = bar_height + 0.1  # Posisi y sedikit di atas bar
    plt.text(bar_x, bar_y, f'{bar_height:.0f}', ha='center', va='bottom', fontsize=10)

# Menambahkan label dan judul
plt.xlabel('Number of Episode')
plt.ylabel('Count')
plt.title('Number of Episode Distribution', fontsize=16)
plt.tight_layout()
plt.show()

# Memisahkan genre (sesuaikan dengan nama kolom genre di dataset)
# Jika genre dipisahkan dengan koma
df['Cast'] = df['Cast'].str.split(', ')

# Mengubah data menjadi satu cast per baris
cast_data = df.explode('Cast')

# Menghitung jumlah drama berdasarkan cast
cast_count = cast_data['Cast'].value_counts().reset_index()
cast_count.columns = ['Cast', 'Count']

# Mengambil Top 10 cast
top_10_cast = cast_count.head(10)

# Membuat barplot untuk Top 10 cast
plt.figure(figsize=(10, 6))
barplot = sns.barplot(data=top_10_cast, x='Count', y='Cast', palette='viridis')

# Menambahkan label pada setiap bar
for bar, count in zip(barplot.patches, top_10_cast['Count']):
    bar_width = bar.get_width()  # Mendapatkan panjang bar
    bar_x = bar_width + 0.13  # Perkecil jarak antara label dan bar
    bar_y = bar.get_y() + bar.get_height() / 2  # Posisi y di tengah bar
    plt.text(bar_x, bar_y, str(count), ha='left', va='center', fontsize=10)

# Menambahkan label dan judul
plt.xlabel('Count')
plt.ylabel('Cast')
plt.title('Top 10 Actors/Actresses by Number of Dramas', fontsize=16)
plt.tight_layout()
plt.show()

# Split and normalize the 'Network' column to handle multiple networks per drama
network_counts = df['Network'].str.split(',').explode().str.strip().value_counts().reset_index()
network_counts.columns = ['Network', 'Count']

# Plotting the bar chart
plt.figure(figsize=(10, 6))
barplot = sns.barplot(data=network_counts, x='Network', y='Count', palette='viridis')

# Menambahkan label pada setiap bar
for bar in barplot.patches:
    bar_height = bar.get_height()  # Get height of the bar
    bar_x = bar.get_x() + bar.get_width() / 2  # X position at the center of the bar
    bar_y = bar_height + 0.1  # Y position slightly above the bar
    plt.text(bar_x, bar_y, f'{int(bar_height)}', ha='center', va='bottom', fontsize=10)

plt.title('Distribution of Korean Drama on Networks', fontsize=16)
plt.xlabel('Network', fontsize=12)
plt.ylabel('Count', fontsize=12)
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()